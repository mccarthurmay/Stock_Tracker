Hello, this is a WIP.

main.py - Recommended, newest working version

IMPORTANT!!!
Main.py is not currently updated to support automatic paper trading. Run "run.py" to start the automated process. However, this is WIP and will likely cause a net loss. 

"Run" function in main.py is for manual trading. 
 - 1. Finds and displays stocks sorted by predicted % gain. Prints { (percent gain), (stock ticker), (rsi), (percent of times sold for a positive value) }
 - 2. Input a ticker and a full report will be presented. This includes stop loss, stop limit, estimated gain, and estimated turnover time. 

Within "commands", "run (old)" is the original purpose of this application. 







Requirements:
yfinance, pandas, matplotlib, numpy, selenium, pyinstaller, tk




*must begin all databases containing tickers with "t_", "tickers_", or "ticker_" to be properly updated
*must begin all portfolios with "p_" or "portfolio_" to be properly updated



Todo:
2. winrate project
    - find signals on why DDOG and ADBE kept rising above 70 rsi

4. ML that reads minute by minute data to predict the next half an hour                                                                                            

6. Redo ml.py to predict if a stock is likely to reach 70rsi
    - currently working, low accuracy at more than "likelihood to reach before 10 days"
        - higher accuracy the lower the days

9. Add automatic trading (paper for now) using Alpaca

10. Separate modules in main.py (day trade and old experiment) for user choice

11. Create a website to host instead of GUI - use django, learn off coursera





Done:
1. absolute low project 
    - find how much holders fluctuate 
    - use 10 rsi, 15 rsi, 20 rsi, and 30 rsi as buy signals
    - collect all necessary information at purchase date
        - date, volume, rsi, moving average (maybe a ratio)
    - gives information on how to set limits
    
3. rework portfolio system
    - buy price is being overwritten
    - (7/11 prices on test)
    - show gain  

7. complete a day trading module
    - integrates absolute low project adjusted for minute by minute data
    - provides stop loss and sell signals
    - finds best stocks to purchase for any given day

8. completely rework/organize code

3. various bugs in main with code rework



Bugs:
1. main.py two windows when clicking "load"
2. shortrate window not displaying correctly



Notes:
1. winrate project
    - shows that 'most' stocks do not gain any more once above 70 rsi
    - bought stocks showing 'bull' and 'MA Converging: False' or 'bear' and 'MA Converging: True' are very promising to be gainers
    - absolute minimum may 'peak' at under 20 rsi
2. shortrate project
    - still waiting on rsi values to go under
3. absolute low project
    - recorded all information, found that the most optimal RSI is 45-50 (specifically 45-47.5)
    - HOWEVER, found a flaw in my logic
        - It only reads perfect situations, where rsi = 45 turning into rsi = 70 is guaranteed.
        - NEED TO KNOW WHEN THIS OCCURS


Depreciated Ideas:

5. Probability to gain in month? (test.py, p_test2.pk)

