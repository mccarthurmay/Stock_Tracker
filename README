# Stock Analysis & Trading Platform

## Overview
This is a comprehensive stock analysis and trading platform that combines technical analysis, automated trading strategies, and portfolio management capabilities. The platform uses various technical indicators including RSI (Relative Strength Index), moving averages, and confidence intervals to identify trading opportunities and manage risk.

## Features

### Core Analysis Tools
- RSI (Relative Strength Index) analysis with customizable periods
- Moving Average analysis (20-day and 50-day)
- Confidence Interval calculations
- MACD (Moving Average Convergence Divergence) indicators
- Volume analysis and tracking
- Win rate and risk analysis

### Trading Capabilities
- Day trading module with real-time monitoring
- Automated buy/sell signal generation
- Portfolio tracking and management
- Stop loss and take profit automation
- Trading performance analytics
- Paper trading integration via Alpaca API

### Data Management
- Multiple database support for different trading strategies
- Automated data updates and maintenance
- Historical data analysis and storage
- Custom database creation and management
- Win rate and short rate tracking

### User Interface
- Tkinter-based GUI for easy interaction
- Real-time data visualization
- Portfolio management interface
- Settings management system
- Database management tools

### To Do
- Reorganize modules in GUI.
    - 95% module 
        - Update All (make a choice on what to update)
            1. Check settings
            2. Update chosen databases
            3. Update portfolios
            4. Run shortrate/Winrate experiments
        - Update Database
        - Update Portfolio
        - Update Shortrate/Winrate
        - Show Databases Button
            - Choose which option (databases, portfolio, shortrate/winrate)
                - choose which exact database
        - Calculations Button (new page)
            - RSI, RSI accuracy, RSI turnover, Moving Average
                - should update RSI accuracy to instead see if accuracy represents trend, not values
    - Manage databases
        - Create database based off file (give format)
        - Add ticker to database
        - Remove ticker 
        - Reset database
    - Application
        - Scraper
        - Converter (py to exe)
    - Settings
        - Change startup settings
        - Check cache/Clear Cache

- Add data gathering methods 
    - IEX Cloud - uh oh they got shut down
    - TIINGO
        - only viable option for day trading; although it is in the IEX 
    - alpaca api - 200 calls/minute 
    - I think we're going to switch to alpaca only, and just get hit with that 200 calls/minute because it's free. 
    

## Requirements

### Python Dependencies
```
python >= 3.8
yfinance
pandas
numpy
scipy
matplotlib
tkinter
requests
pytz
selenium
alpaca-trade-api
```

### API Keys Required
- Tiingo API Key (for market data)
- Alpaca API Key (for paper trading)

## Installation

1. Clone the repository:
```bash
git clone [repository-url]
cd [repository-name]
```

2. Install required packages:
```bash
pip install -r requirements.txt
```

3. Set up your API keys in config.py:
```python
import os
os.environ['TIINGO_API_KEY_ID'] = "your-tiingo-api-key"
os.environ['APCA_API_KEY_ID'] = "your-alpaca-key-id"
os.environ['APCA_API_SECRET_KEY'] = "your-alpaca-secret-key"
```

## Usage

### Starting the Application
Run the main application:
```bash
python main.py
```

### Main Menu Options
1. **Run** - Launch the day trading module
2. **Commands** - Execute individual analysis tasks
3. **Manage Databases** - Handle database operations
4. **Portfolio** - Access portfolio management
5. **Applications** - Use external tools
6. **Settings** - Configure application settings

### Database Management
- Store new ticker lists
- Load existing databases
- Add/remove individual tickers
- Reset databases
- Update data automatically

### Trading Features
- Set custom RSI thresholds
- Configure moving average periods
- Set stop loss and take profit levels
- Monitor positions in real-time
- View trading performance metrics

## File Structure
```
├── main.py
├── config.py
├── data/
│   ├── analysis.py
│   ├── database.py
│   ├── day_trade.py
│   ├── paper.py
│   ├── winrate.py
│   └── shortrate.py
├── settings/
│   └── settings_manager.py
├── applications/
│   ├── converter.py
│   └── scraper.py
└── storage/
    ├── databases/
    ├── settings/
    └── ticker_lists/
```

## Safety Features
- Automated stop loss implementation
- Risk management through position sizing
- Paper trading environment for testing
- Multiple validation checks before trades
- Error handling and logging

## Notes
- The platform is designed for educational and testing purposes
- Always verify trading signals with multiple indicators
- Paper trade extensively before using real money
- Keep API keys secure and never share them
- Regularly backup your databases

## Contributing
Contributions are welcome! Please feel free to submit a Pull Request.

## License
[Include your license information here]

## Disclaimer
This software is for educational purposes only. Always conduct your own research and never trade with money you cannot afford to lose. The creators are not responsible for any financial losses incurred while using this platform.